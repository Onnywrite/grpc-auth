// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: sso.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*Token, error)
	SignUpWithLogin(ctx context.Context, in *SignUpLoginRequest, opts ...grpc.CallOption) (*Token, error)
	SignUpWithEmail(ctx context.Context, in *SignUpEmailRequest, opts ...grpc.CallOption) (*Token, error)
	LogInWithLogin(ctx context.Context, in *LogInLoginRequest, opts ...grpc.CallOption) (*Token, error)
	LogInWithEmail(ctx context.Context, in *LogInEmailRequest, opts ...grpc.CallOption) (*Token, error)
	LogOut(ctx context.Context, in *Token, opts ...grpc.CallOption) (*NullResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/auth.Auth/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SignUpWithLogin(ctx context.Context, in *SignUpLoginRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/auth.Auth/SignUpWithLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SignUpWithEmail(ctx context.Context, in *SignUpEmailRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/auth.Auth/SignUpWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LogInWithLogin(ctx context.Context, in *LogInLoginRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/auth.Auth/LogInWithLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LogInWithEmail(ctx context.Context, in *LogInEmailRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/auth.Auth/LogInWithEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) LogOut(ctx context.Context, in *Token, opts ...grpc.CallOption) (*NullResponse, error) {
	out := new(NullResponse)
	err := c.cc.Invoke(ctx, "/auth.Auth/LogOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	SignUp(context.Context, *SignUpRequest) (*Token, error)
	SignUpWithLogin(context.Context, *SignUpLoginRequest) (*Token, error)
	SignUpWithEmail(context.Context, *SignUpEmailRequest) (*Token, error)
	LogInWithLogin(context.Context, *LogInLoginRequest) (*Token, error)
	LogInWithEmail(context.Context, *LogInEmailRequest) (*Token, error)
	LogOut(context.Context, *Token) (*NullResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) SignUp(context.Context, *SignUpRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedAuthServer) SignUpWithLogin(context.Context, *SignUpLoginRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpWithLogin not implemented")
}
func (UnimplementedAuthServer) SignUpWithEmail(context.Context, *SignUpEmailRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpWithEmail not implemented")
}
func (UnimplementedAuthServer) LogInWithLogin(context.Context, *LogInLoginRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogInWithLogin not implemented")
}
func (UnimplementedAuthServer) LogInWithEmail(context.Context, *LogInEmailRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogInWithEmail not implemented")
}
func (UnimplementedAuthServer) LogOut(context.Context, *Token) (*NullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogOut not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SignUpWithLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SignUpWithLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/SignUpWithLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SignUpWithLogin(ctx, req.(*SignUpLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SignUpWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SignUpWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/SignUpWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SignUpWithEmail(ctx, req.(*SignUpEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LogInWithLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LogInWithLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/LogInWithLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LogInWithLogin(ctx, req.(*LogInLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LogInWithEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LogInWithEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/LogInWithEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LogInWithEmail(ctx, req.(*LogInEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_LogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).LogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.Auth/LogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).LogOut(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _Auth_SignUp_Handler,
		},
		{
			MethodName: "SignUpWithLogin",
			Handler:    _Auth_SignUpWithLogin_Handler,
		},
		{
			MethodName: "SignUpWithEmail",
			Handler:    _Auth_SignUpWithEmail_Handler,
		},
		{
			MethodName: "LogInWithLogin",
			Handler:    _Auth_LogInWithLogin_Handler,
		},
		{
			MethodName: "LogInWithEmail",
			Handler:    _Auth_LogInWithEmail_Handler,
		},
		{
			MethodName: "LogOut",
			Handler:    _Auth_LogOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sso.proto",
}
